// Generated by gencpp from file fub_trajectory_msgs/Trajectory.msg
// DO NOT EDIT!


#ifndef FUB_TRAJECTORY_MSGS_MESSAGE_TRAJECTORY_H
#define FUB_TRAJECTORY_MSGS_MESSAGE_TRAJECTORY_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <std_msgs/Header.h>
#include <fub_trajectory_msgs/TrajectoryPoint.h>

namespace fub_trajectory_msgs
{
template <class ContainerAllocator>
struct Trajectory_
{
  typedef Trajectory_<ContainerAllocator> Type;

  Trajectory_()
    : header()
    , child_frame_id()
    , trajectory()  {
    }
  Trajectory_(const ContainerAllocator& _alloc)
    : header(_alloc)
    , child_frame_id(_alloc)
    , trajectory(_alloc)  {
  (void)_alloc;
    }



   typedef  ::std_msgs::Header_<ContainerAllocator>  _header_type;
  _header_type header;

   typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _child_frame_id_type;
  _child_frame_id_type child_frame_id;

   typedef std::vector< ::fub_trajectory_msgs::TrajectoryPoint_<ContainerAllocator> , typename ContainerAllocator::template rebind< ::fub_trajectory_msgs::TrajectoryPoint_<ContainerAllocator> >::other >  _trajectory_type;
  _trajectory_type trajectory;





  typedef boost::shared_ptr< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> const> ConstPtr;

}; // struct Trajectory_

typedef ::fub_trajectory_msgs::Trajectory_<std::allocator<void> > Trajectory;

typedef boost::shared_ptr< ::fub_trajectory_msgs::Trajectory > TrajectoryPtr;
typedef boost::shared_ptr< ::fub_trajectory_msgs::Trajectory const> TrajectoryConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace fub_trajectory_msgs

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': False, 'IsMessage': True, 'HasHeader': True}
// {'std_msgs': ['/opt/ros/melodic/share/std_msgs/cmake/../msg'], 'geometry_msgs': ['/opt/ros/melodic/share/geometry_msgs/cmake/../msg'], 'fub_trajectory_msgs': ['/home/davidlin/catkin_ws_toyboys/src/fub_trajectory_msgs/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> const>
  : TrueType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c25a841ab3a41a9903c2c454744a12f1";
  }

  static const char* value(const ::fub_trajectory_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc25a841ab3a41a99ULL;
  static const uint64_t static_value2 = 0x03c2c454744a12f1ULL;
};

template<class ContainerAllocator>
struct DataType< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "fub_trajectory_msgs/Trajectory";
  }

  static const char* value(const ::fub_trajectory_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
{
  static const char* value()
  {
    return "# Message that contains a trajectory for mobile robot navigation\n"
"\n"
"# Similar to nav_msgs/Odometry, the pose in a TrajectoryPoint should\n"
"# be specified in the coordinate frame given by header.frame_id while\n"
"# the twist in a TrajectoryPoint should be specified in the coordinate\n"
"# frame given by the child_frame_id\n"
"\n"
"# default header, including the frame id for the poses\n"
"std_msgs/Header header\n"
"\n"
"# frame id for Twists (velocity and acceleration)\n"
"string child_frame_id\n"
"\n"
"# the trajectory points\n"
"fub_trajectory_msgs/TrajectoryPoint[] trajectory\n"
"\n"
"================================================================================\n"
"MSG: std_msgs/Header\n"
"# Standard metadata for higher-level stamped data types.\n"
"# This is generally used to communicate timestamped data \n"
"# in a particular coordinate frame.\n"
"# \n"
"# sequence ID: consecutively increasing ID \n"
"uint32 seq\n"
"#Two-integer timestamp that is expressed as:\n"
"# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n"
"# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n"
"# time-handling sugar is provided by the client library\n"
"time stamp\n"
"#Frame this data is associated with\n"
"string frame_id\n"
"\n"
"================================================================================\n"
"MSG: fub_trajectory_msgs/TrajectoryPoint\n"
"# Message that contains single point on a trajectory suited for mobile navigation.\n"
"# The trajectory is described by a sequence of poses, velocities,\n"
"# accelerations and temporal information.\n"
"\n"
"# Why this message type?\n"
"# nav_msgs/Path describes only a path without temporal information.\n"
"# trajectory_msgs package contains only messages for joint trajectories.\n"
"\n"
"# The pose of the robot\n"
"geometry_msgs/Pose pose\n"
"\n"
"# Corresponding velocity\n"
"geometry_msgs/Twist velocity\n"
"\n"
"# Corresponding acceleration\n"
"geometry_msgs/Twist acceleration\n"
"\n"
"duration time_from_start\n"
"\n"
"\n"
"\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Pose\n"
"# A representation of pose in free space, composed of position and orientation. \n"
"Point position\n"
"Quaternion orientation\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Point\n"
"# This contains the position of a point in free space\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Quaternion\n"
"# This represents an orientation in free space in quaternion form.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
"float64 w\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Twist\n"
"# This expresses velocity in free space broken into its linear and angular parts.\n"
"Vector3  linear\n"
"Vector3  angular\n"
"\n"
"================================================================================\n"
"MSG: geometry_msgs/Vector3\n"
"# This represents a vector in free space. \n"
"# It is only meant to represent a direction. Therefore, it does not\n"
"# make sense to apply a translation to it (e.g., when applying a \n"
"# generic rigid transformation to a Vector3, tf2 will only apply the\n"
"# rotation). If you want your data to be translatable too, use the\n"
"# geometry_msgs/Point message instead.\n"
"\n"
"float64 x\n"
"float64 y\n"
"float64 z\n"
;
  }

  static const char* value(const ::fub_trajectory_msgs::Trajectory_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.header);
      stream.next(m.child_frame_id);
      stream.next(m.trajectory);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Trajectory_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::fub_trajectory_msgs::Trajectory_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::fub_trajectory_msgs::Trajectory_<ContainerAllocator>& v)
  {
    s << indent << "header: ";
    s << std::endl;
    Printer< ::std_msgs::Header_<ContainerAllocator> >::stream(s, indent + "  ", v.header);
    s << indent << "child_frame_id: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other > >::stream(s, indent + "  ", v.child_frame_id);
    s << indent << "trajectory[]" << std::endl;
    for (size_t i = 0; i < v.trajectory.size(); ++i)
    {
      s << indent << "  trajectory[" << i << "]: ";
      s << std::endl;
      s << indent;
      Printer< ::fub_trajectory_msgs::TrajectoryPoint_<ContainerAllocator> >::stream(s, indent + "    ", v.trajectory[i]);
    }
  }
};

} // namespace message_operations
} // namespace ros

#endif // FUB_TRAJECTORY_MSGS_MESSAGE_TRAJECTORY_H
